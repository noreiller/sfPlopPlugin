<?php



/**
 * Skeleton subclass for performing query and update operations on the 'sf_plop_page' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Fri Jan 28 18:11:39 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfPlopPlugin.lib.model
 */
class sfPlopPagePeer extends BasesfPlopPagePeer {

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $slug The slug to find
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveBySlug($slug = null, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(sfPlopPagePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$obj = null;
		if ($slug) {
			$criteria = new Criteria(sfPlopPagePeer::DATABASE_NAME);
			$criteria->add(sfPlopPagePeer::SLUG, $slug);
			$obj = sfPlopPagePeer::doSelectOne($criteria, $con);
		}
		return $obj;
	}

  /**
   * Returns all the page tree.
   * @return Array
   */
  public static function getPageSlugsWithLevel($only_template_page = false)
  {
    $nodes = sfPlopPageQuery::create()
      ->findRoot()
      ->getBranch();

    $array = array();
    foreach($nodes as $node)
      if (
        !$only_template_page
        || ($only_template_page && $node->isTemplate())
      )
        $array[$node->getSlug()] = str_repeat('-', $node->getLevel()) . ' ' . $node->getSlug();

    return $array;
  }

  /**
   * Returns all the page tree.
   * @return Array
   */
  public static function getPagesWithLevel($only_template_page = false)
  {
    $nodes = sfPlopPageQuery::create()
      ->findRoot()
      ->getBranch();

    $array = array();
    foreach($nodes as $node)
      if (
        !$only_template_page
        || ($only_template_page && $node->isTemplate())
      )
        $array[$node->getId()] = str_repeat('-', $node->getLevel()) . ' ' . $node->getSlug();

    return $array;
  }

  /**
   * Get the maaximum level of the page tree.
   * @return Integer
   */
  public static function getMaxLevel()
  {
    return sfPlopPageQuery::create()
      ->orderByTreeLevel(Criteria::DESC)
      ->findOne()
      ->getLevel() + 1
    ;
  }

} // sfPlopPagePeer
