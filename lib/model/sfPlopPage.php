<?php



/**
 * Skeleton subclass for representing a row from the 'sf_plop_page' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Fri Jan 28 18:11:39 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfPlopPlugin.lib.model
 */
class sfPlopPage extends BasesfPlopPage {

  protected $isTemplate = null;
  protected $isTemplateChild = null;

  /**
   * If the object is displayed, the slug is sent.
   * @return Boolean
   */
  public function __toString()
  {
    return $this->getSlug();
  }

  /**
   * Shortcut function to get the is_category column of the page.
   * @return Boolean
   */
  public function isCategory()
  {
    return $this->getIsCategory();
  }

  /**
   * Shortcut function to get the publication status of the page.
   * @return Boolean
   */
  public function isPublished()
  {
    return $this->getIsPublished();
  }

  /**
   * Override the default method retrieving the [title] column value.
   *
   * @return string
   */
  public function getTitle()
  {
    $t = parent::getTitle();
    if (is_null($t))
    {
      if ($this->getCulture() == sfPlop::get('sf_plop_default_culture'))
        $title = 'Page';
      else
        $title = $this->getTranslation(sfPlop::get('sf_plop_default_culture'))->getTitle();
      $this->setTitle($title);
      $this->save();
    }

    return parent::getTitle();
  }

  /**
   * Check if the page has slots in his page.
   * @return Boolean
   */
  public function hasSlots()
  {
    return $this->isTemplate()
      ? ($this->countsfPlopSlots() > 0 ? true : false)
      : ($this->countsfPlopSlotConfigs() > 0 ? true : false)
    ;
  }

  /**
   * Check if the current page has a slot area
   * @return Boolean
   */
  public function hasSlotArea()
  {
    $count = sfPlopSlotQuery::create()
//      ->filterByPageId($this->isTemplate() ? $this->getId() : $this->getTemplateId())
      ->filterByPageId($this->getId())
      ->filterByTemplate('Area')
      ->groupById()
      ->count();

    return $count ? true : false;
  }

  /**
   * Check if the page has pages using this one as a template.
   * @return Boolean
   */
  public function hasTemplateChildren()
  {
    return $this->countTemplateChildren() > 0 ? true : false;
  }

  /**
   * Count the number of pages using this one as a template.
   * @return Boolean
   */
  public function countTemplateChildren()
  {
    return sfPlopPageQuery::create()
      ->filterByTemplateId($this->getId())
      ->count()
    ;
  }

  /**
   * Get the pages using this one as a template.
   * @return Boolean
   */
  public function getTemplateChildren()
  {
    return sfPlopPageQuery::create()
      ->filterByTemplateId($this->getId())
      ->find()
    ;
  }

  /**
   * Check if the page is a template.
   * @return Boolean
   */
  public function isTemplate()
  {
    if ($this->isTemplate === NULL)
      $this->isTemplate =
        ($this->countTemplateChildren() >= 0 && is_null($this->getTemplateId()))
        ? true : false;

    return $this->isTemplate;
  }

  /**
   * Check if the page is a template child.
   * @return Boolean
   */
  public function isTemplateChild()
  {
    if ($this->isTemplateChild === NULL)
      $this->isTemplateChild =
        (!is_null($this->getTemplateId()) && $this->getParent()->isTemplate())
        ? true : false;

    return $this->isTemplateChild;
  }

  /**
   * Get the template page.
   * @return Boolean
   */
  public function getTemplate($culture = null)
  {
    return $culture
      ? sfPlopPageQuery::create()
        ->joinWithI18n($this->culture)
        ->findOneById($this->getTemplateId())
      : sfPlopPagePeer::retrieveByPK($this->getTemplateId())
    ;
  }

  /**
   * Copy the slots from another page
   * @param sfPlopPage $page_ref
   */
  public function copySlotsFrom(sfPlopPage $page_ref)
  {
    foreach ($page_ref->getsfPlopSlots() as $slot_ref)
    {
      $slot = new sfPlopSlot();
      $slot_ref->copyInto($slot, true);
      $slot->swapPage($this->getId());
    }
  }

  /**
   * Check if the current page can have slots
   * @return boolean
   */
  public function isSlotable()
  {
    return ($this->isTemplate() && !$this->isCategory())
      || (!$this->isTemplate() && $this->getTemplate()->hasSlotArea());
  }

  /**
   * Delete the slots attached to this page
   */
  public function deleteOwnSlots()
  {
    foreach ($this->getsfPlopSlots() as $slot)
      $slot->delete();
  }

  /**
   * Delete all the unused template slot configs
   * @param  Integer $tpl_id The template page to retrieve slots
   */
  public function deleteUnusedInheritedSlotConfigs($tpl_id)
  {
    if (!$tpl_id)
      return;

    $slot_ids = array();
    $slots = sfPlopSlotQuery::create()
      ->filterByPageId($tpl_id)
      ->filterByTemplate('Area', Criteria::NOT_EQUAL)
      ->find()
    ;
    foreach ($slots as $slot)
      $slot_ids []= $slot->getId();

    $page_ids = array($this->getId());
    $pages = sfPlopPageQuery::create()
      ->filterByTemplateId($this->getId())
      ->find()
    ;
    foreach ($pages as $page)
      $page_ids []= $page->getId();

    $slot_configs = sfPlopSlotConfigQuery::create()
      ->filterByPageId($page_ids)
      ->filterBySlotId($slot_ids)
      ->find()
    ;
    foreach ($slot_configs as $sc)
      $sc->delete();
  }

  /**
   * Override the doSave function to do some custom tweaks.
   * @param PropelPDO $con
   */
  protected function doSave(PropelPDO $con)
  {
    if ($this->isColumnModified(sfPlopPagePeer::TEMPLATE_ID))
    {
      $tpl = sfPlopPagePeer::retrieveByPK($this->getTemplateId());
      if ($tpl && $tpl->getTemplateId())
      {
        $tplTpl = sfPlopPagePeer::retrieveByPK($tpl->getTemplateId());
        if ($tplTpl && $tplTpl->hasSlotArea())
          $this->setTemplateId($tpl->getId());
      }
      elseif (!$tpl)
      {
        $this->setTemplateId(null);
      }

      if (!$this->isSlotable())
        $this->deleteOwnSlots();

      $this->getPeer()->removeInstanceFromPool($this);
      $oldTemplate = $this->getPeer()->retrieveByPK($this->getId());
      if ($oldTemplate)
        $oldTemplateId = $oldTemplate->getTemplateId();
      if ($oldTemplateId != $this->getTemplateId())
        $this->deleteUnusedInheritedSlotConfigs($oldTemplateId);
    }

    return parent::doSave($con);
  }

} // sfPlopPage
