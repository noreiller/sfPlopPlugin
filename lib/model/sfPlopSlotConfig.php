<?php



/**
 * Skeleton subclass for representing a row from the 'sf_plop_slot_config' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Thu Feb  3 08:23:10 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfPlopPlugin.lib.model
 */
class sfPlopSlotConfig extends BasesfPlopSlotConfig {

  protected $optionsFromYaml = null;

  /**
   * @see parent::clear()
   */
  public function clear() {
    parent::clear();

    $this->optionsFromYaml = null;
  }

  /**
   * Clean the i18n values
   */
  public function clean() {
    $this->optionsFromYaml = null;
  }

  /**
   * Check if the slot config is translated
   */
  public function isTranslated($c = null, PropelPDO $con = null)
  {
    return count($this->getsfPlopSlotConfigI18ns($c)) > 0 ? true : false;
  }

  /**
   * Reset the i18n values
   */
  public function reset($culture = null)
  {
    $c = sfPlopSlotConfigI18nQuery::create()
      ->filterByCulture($culture)
    ;
    $objs = $this->getsfPlopSlotConfigI18ns($c);
    $count = 0;
    foreach($objs as $obj)
    {
      $obj->delete();
      if ($obj->isDeleted())
        $count++;
    }

    return ($count == count($objs)) ? true : false;
  }

  /**
   * Get the value of the config slot
   */
  public function getValue($culture = null)
  {
    if ($culture)
      $this->setCulture($culture);

    $s = parent::getValue();
    if (is_null($s))
      return $this->getsfPlopSlot()->getDefaultValue($culture);
    else
      return $s;
  }

  /**
   * Get the options of the config slot
   */
  public function getOptions($culture = null)
  {
    if ($culture)
      $this->setCulture($culture);

    $s = parent::getOptions();
    if (is_null($s))
      return $this->getsfPlopSlot()->getDefaultOptions($culture);
    else
      return $s;
  }

  /**
   * Load the Yaml formatted options into a PHP array
   * @param String Culture
   * @return Array
   */
  public function getOptionsFromYaml($culture = null)
  {
    if (!$this->optionsFromYaml) {
      $this->optionsFromYaml = sfYaml::load($this->getOptions($culture));
    }

    return $this->optionsFromYaml;
  }

  /**
   * Get the option of a slot for a given key.
   * @param string $name
   * @param mixed $default
   * @param String $culture
   * @return mixed
   */
  public function getOption($name, $default = null, $culture = null)
  {
    if (!$culture)
      $culture = $this->getCulture();

    $optionsFromYaml = $this->getOptionsFromYaml($culture);
    $option = isset($optionsFromYaml[$name]) ? $optionsFromYaml[$name] : $default;

    return $option;
  }

  /**
   *
   * @return BaseObject The associated slot of the slotConfig
   */
  public function getSlot()
  {
    return $this->getsfPlopSlot();
  }

  /**
   * Retrieve the page object of the slot config for a given culture.
   * @return BaseObject The associated page of the slotConfig
   */
  public function getPage($culture = null)
  {
    $page = $this->getsfPlopPage();
    $page->setCulture($culture);

    return $page;
  }

  /**
   * @see sfPlopSlot::getTemplate()
   */
  public function getTemplate()
  {
    return $this->getSlot()->getTemplate();
  }

  /**
   * Override the doSave function to do some custom tweaks.
   * @param PropelPDO $con
   */
  protected function doSave(PropelPDO $con)
  {
    if (!$this->getSlot()->isEditable() && $this->getPageId() == $this->getSlot()->getPageId())
    {
      $slotConfigs = sfPlopSlotConfigPeer::retrieveDescendants($this->getSlotId(), $this->getPageId());
      if ($slotConfigs)
        foreach ($slotConfigs as $slotConfig)
          if ($slotConfig->getId() != $this->getId())
            $slotConfig->delete();
    }

    $this->getPage()->setUpdatedAt(time());
    $this->getPage()->save();

    return parent::doSave($con);
  }

} // sfPlopSlotConfig
