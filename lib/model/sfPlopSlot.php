<?php



/**
 * Skeleton subclass for representing a row from the 'sf_plop_slot' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Sat Jan 29 19:23:57 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfPlopPlugin.lib.model
 */
class sfPlopSlot extends BasesfPlopSlot
{

  protected $templateObject = null;
  protected $templateParameters = null;

  /**
   * Checks if the content of a slot is editable.
   * @return Boolean
   */
  public function isContentEditable()
  {
    return $this->getTemplateObject()->isContentEditable();
  }

  /**
   * Checks if the content of a slot is optionable.
   * @return Boolean
   */
  public function isContentOptionable()
  {
    return $this->getTemplateObject()->isContentOptionable();
  }

  /**
   * Checks if the template of a slot is 'Area'.
   * @return Boolean
   */
  public function isArea()
  {
    return $this->getTemplate() == 'Area';
  }

  /**
   * Check if the template is loaded
   * @return Boolean
   */
  public function isTemplateLoaded()
  {
    return in_array($this->getTemplate(), array_keys(sfPlop::getSafePluginSlots()));
  }

  /**
   * Retrieve the template name of the slot template.
   * @return Boolean
   */
  public function getTemplateName()
  {
    $array = sfPlop::getSafePluginSlots();

    return isset($array[$this->getTemplate()]) ? $array[$this->getTemplate()] : '';
  }

  /**
   * Retrieve the template object of the slot template.
   * @return Boolean
   */
  public function getTemplateObject()
  {
    if (!$this->templateObject)
    {
      $slot_template_class = sfPlop::get('sf_plop_slots_class_prefix') . $this->getTemplate();
      $this->templateObject = new $slot_template_class();
    }

    return $this->templateObject;
  }

  public function getTemplateParameters($array = array())
  {
    if (!$this->templateParameters)
    {
      $parameters = array();
      if (count($this->getTemplateObject()->getRequestParameters()) > 0)
      {
        $keys = array_keys($array);

        foreach ($this->getTemplateObject()->getRequestParameters() as $p)
          if (in_array($p, $keys))
            $parameters [$p]= $array[$p];
      }
      $this->templateParameters = $parameters;
    }

    return $this->templateParameters;
  }

  public function getStringifiedTemplateParameters($array = array(), $separator = '&')
  {
    $parameters = $this->getTemplateParameters($array);

    $s = '';
    foreach ($parameters as $k => $v)
    {
      if (is_array($v))
        $s .= $separator . $k . '=' . implode('', $v);
      else
        $s .= $separator . $k . '=' . $v;
    }

    return $s;
  }

  /**
   * Shortcut function to check if the slot is editable.
   * @param PropelPDO $con
   * @return Boolean
   */
  public function isEditable(PropelPDO $con = null)
  {
    return $this->getIsEditable();
  }

  /**
   * Shortcut function to get the publication status of the slot.
   * @return Boolean
   */
  public function isPublished()
  {
    return $this->getIsPublished();
  }

  /**
   * Shortcut function to get the page of the slot.
   * @see getsfPlopPage
   */
  public function getPage(PropelPDO $con = null)
  {

    return $this->getsfPlopPage();
  }

  /**
   * Retrieve the default value of the slot in the given culture
   * @param String $culture
   * @param PropelPDO $con
   * @return String
   */
  public function getDefaultValue($culture = null, PropelPDO $con = null)
  {
    if ($culture && !$this->isEditable() && $this->getPage()->isTemplateChild())
      $return = $this->getValue($culture);
    elseif (!$culture || $culture == sfPlop::get('sf_plop_default_culture'))
      $return = $this->getTemplateObject()->getDefaultValue();
    else
      $return = $this->getValue(sfPlop::get('sf_plop_default_culture'));

    return $return;
  }

  /**
   * Returns the I18N value of the slot config.
   * @param String $culture
   * @param PropelPDO $con
   * @return String
   */
  public function getValue($culture = null, PropelPDO $con = null)
  {
    if (!$this->hasConfig(null, $con))
      return $this->getDefaultValue($culture);

    $page_id = (!$this->getPage()->isTemplate()
      && $this->getPage()->getTemplateId()
      && $this->getPageId() == $this->getPage()->getTemplateId()
    )
      ? $this->getPage()->getTemplateId()
      : $this->getPageId()
    ;

    $config = sfPlopSlotConfigQuery::create()
      ->joinWithI18n($culture)
      ->filterByPageId($page_id)
      ->filterBySlotId($this->getId())
      ->findOne($con)
    ;

    if ($config)
      return $config->getValue();
    else
      return $this->getDefaultValue($culture);
  }

  /**
   * Retrieve the default options of the slot in the given culture
   * @param String $culture
   * @param PropelPDO $con
   * @return String
   */
  public function getDefaultOptions($culture = null, PropelPDO $con = null)
  {
    if (!$culture || $culture == sfPlop::get('sf_plop_default_culture'))
      $return = $this->getTemplateObject()->getDefaultOptions();
    else
      $return = $this->getOptions(sfPlop::get('sf_plop_default_culture'));

    return $return;
  }

  /**
   * Returns the I18N options of the slot config.
   * @param String $culture
   * @param PropelPDO $con
   * @return String
   */
  public function getOptions($culture = null, PropelPDO $con = null)
  {
    if (!$this->hasConfig(null, $con))
      return $this->getTemplateObject()->getDefaultOptions();

    $config = sfPlopSlotConfigQuery::create()
      ->joinWithI18n($culture)
      ->filterByPageId($this->getPageId())
      ->filterBySlotId($this->getId())
      ->findOne()
    ;

    if ($config)
      return $config->getOptions();
  }

  /**
   * Check if the slot has a config set
   * @param Criteria $c
   * @param PropelPDO $con
   * @return Boolean
   */
  public function hasConfig($c = null, PropelPDO $con = null)
  {
    return count($this->getsfPlopSlotConfigs($c)) > 0 ? true : false;
  }

  /**
   * Move the slot to another page
   * @param Integer $page_id
   */
  public function swapPage($page_id, PropelPDO $con = null)
  {
    if (!$con)
      $con = Propel::getConnection(sfPlopSlotPeer::DATABASE_NAME);

    try
    {
      $con->beginTransaction();

      $this->setPageId($page_id);
      $this->setRank(sfPlopSlotQuery::create()->getMaxRank($page_id, $con) + 1);
      $this->save();
      foreach($this->getsfPlopSlotConfigs() as $config)
      {
        if (!$config->isDeleted())
        {
          $config->setPageId($page_id);
          $config->save();
        }
      }

      $con->commit();
    }
    catch (Exception $e)
    {
      $con->rollback();
      throw $e;
    }

    return $this;
  }

  /**
   * Override the doSave function to do some custom tweaks.
   * @param PropelPDO $con
   */
  protected function doSave(PropelPDO $con)
  {
    if (
      !$this->getPage()->isTemplate() && $this->isEditable()
      && !$this->getPage()->getTemplate()->hasSlotArea()
    )
      $this->setIsEditable(false);

    if (!$this->isNew() && !$this->isEditable())
    {
      foreach (
        sfPlopSlotConfigPeer::retrieveDescendants($this->getId(), $this->getPageId())
        as $slotConfig
      )
        if ($slotConfig->getSlotId() != $this->getId())
          $slotConfig->delete();
    }

    $this->getPage()->setUpdatedAt(time());
    $this->getPage()->save();

    return parent::doSave($con);
  }

  /**
   * Returns the key used for the template cache dedicated to the slot
   * @param String $culture
   * @param Integer $page_id
   * @return String
   */
  public function getCacheKey($culture = null, $page_id = null)
  {
    return
      'plop_slot'
        . '_' . ($page_id ? $page_id : $this->getPage()->getId())
        . '_' . $this->getId()
        . '_' . ($culture ? $culture : '*')
    ;
  }

} // sfPlopSlot
