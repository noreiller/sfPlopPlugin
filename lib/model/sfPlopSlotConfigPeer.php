<?php



/**
 * Skeleton subclass for performing query and update operations on the 'sf_plop_slot_config' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Thu Feb  3 08:23:10 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfPlopPlugin.lib.model
 */
class sfPlopSlotConfigPeer extends BasesfPlopSlotConfigPeer
{

  /**
   * Retrieve the descendants slot configs of a slot which do not belong to the
   * template page.
   * @param Int $slot_id
   * @param Int $page_id
   * @return BaseObject Collection
   */
  public static function retrieveDescendants($slot_id = null, $page_id = null)
  {
    if (!$slot_id || !$page_id)
      return;
    
    return sfPlopSlotConfigQuery::create()
      ->retrieveDescendants($slot_id, $page_id)
      ->find()
    ;
  }

  /**
   * Retrieve a slot config by his page, his slot and his culture.
   * @param sfPlopPage $page
   * @param sfPlopSlot $slot
   * @param String $culture
   * @param Boolean $createIfEmpty
   * @return BaseObject
   */
  public static function getOneByPageSlotAndCulture(sfPlopPage $page, sfPlopSlot $slot, $culture = null, $createIfEmpty = false)
  {
    $obj = sfPlopSlotConfigQuery::create()
      ->joinWithsfPlopSlot()
      ->filterBysfPlopSlot($slot)
      ->filterBysfPlopPage($page)
      ->findOne();

    if ($obj)
    {
      $obj->setCulture($culture);
    }
    elseif (!$obj && $createIfEmpty)
    {
      $obj = new sfPlopSlotConfig();
      $obj->setPageId($page->getId());
      $obj->setSlotId($slot->getId());
      $obj->setCulture($culture);
      $obj->setValue($slot->getValue($culture));
      $obj->setOptions($slot->getOptions($culture));
      $obj->save();
    }

    return $obj;
  }

} // sfPlopSlotConfigPeer
